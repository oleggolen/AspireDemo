@page "/weather"
@using Microsoft.AspNetCore.Components.QuickGrid;
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject HttpClient client;
<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (_forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <QuickGrid Items="_forecasts">
        <PropertyColumn Property="@(p => p.Date)" Format="yyyy-MM-dd" Sortable="true" />
        <PropertyColumn Property="@(p => p.TemperatureC)" Sortable="true" />
        <PropertyColumn Property="@(p => p.TemperatureF)"  Sortable="true" />
        <PropertyColumn Property="arg => arg.Summary" />
    </QuickGrid>
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in _forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {

    private IQueryable<WeatherForecast> _forecasts;
    protected override async Task OnInitializedAsync()
    {
        var weatherForecasts = await client.GetFromJsonAsync<List<WeatherForecast>>("http://api/weatherforecast");
        _forecasts = weatherForecasts?.AsQueryable() ?? new EnumerableQuery<WeatherForecast>(new List<WeatherForecast>());
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

}